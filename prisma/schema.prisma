generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                   @id @default(uuid())
  username                   String                   @unique
  photo                      String
  name                       String
  bio                        String
  email                      String                   @unique
  password                   String
  emailVerified              Boolean                  @default(false)
  role                       String                   @default("USER")
  settings                   UserSettings             @relation(fields: [userSettingsId], references: [id])
  token                      String                   @default("demo")
  interests                  String[]
  achievements               Achievement[]
  userSettingsId             String
  CourseEnrollment           CourseEnrollment[]
  EmailServiceSubscription   EmailServiceSubscription @relation(fields: [emailServiceSubscriptionId], references: [id])
  emailServiceSubscriptionId String
  Education                  Education[]
  educationId                Int?
  Experience                 Experience[]
  experienceId               Int?
  Projects                   UserProjects[]
  projectsId                 Int?
  Skills                     Skills[]
  skillsId                   Int?
}

model Skills {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  level     String
  User      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
}

model UserProjects {
  id           Int      @id @default(autoincrement())
  userId       String
  name         String
  description  String
  startDate    DateTime
  endDate      DateTime
  DeployedLink String?
  Githublink   String?
  User         User     @relation(fields: [userId], references: [id])
}

model Experience {
  id          Int      @id @default(autoincrement())
  userId      String
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime
  description String
  User        User     @relation(fields: [userId], references: [id])
}

model Education {
  id          Int      @id @default(autoincrement())
  userId      String
  school      String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime
  description String
  User        User     @relation(fields: [userId], references: [id])
}

model EmailServiceSubscription {
  id            String   @id @default(uuid())
  userId        String
  CourseUpdates Boolean  @default(true)
  montlyUpdates Boolean  @default(true)
  security      Boolean  @default(true)
  emailService  Boolean  @default(true)
  updatedAt     DateTime @updatedAt
  User          User[]
}

model NewsletterSubscription {
  id         String   @id @default(uuid())
  Email      String[]
  newsletter Boolean  @default(true)
  updatedAt  DateTime @updatedAt
}

model UserSettings {
  id              String  @id @default(uuid())
  userId          String
  publicProfile   Boolean @default(true)
  publicEmail     Boolean @default(true)
  publicBio       Boolean @default(true)
  publicPhoto     Boolean @default(true)
  publicName      Boolean @default(true)
  publicInterests Boolean @default(true)
  User            User[]
}

model Course {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  image            String
  madeByUserGit    String[]
  madeByUser       String[]
  GithubLink       String?
  modules          Module[]
  userId           Int?
  Achievement      Achievement[]
  tags             String[]
  CourseEnrollment CourseEnrollment[]
}

model Module {
  id            Int        @id @default(autoincrement())
  name          String
  type          String
  description   String
  madeByUserGit String[]
  madeByUser    String[]
  GithubLink    String?
  numbering     Int
  content       String?
  video         String?
  youtubeEmbed  Boolean?
  quiz          Question[]
  image         String
  courseId      Int        @map("courseId")
  Course        Course?    @relation(fields: [courseId], references: [id])
}

model Question {
  id           String      @id @default(uuid())
  title        String
  options      String[]
  answer       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  topics       String[]
  tags         String[]
  level        String
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
  Module       Module?     @relation(fields: [moduleId], references: [id])
  moduleId     Int?
}

model Assignment {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  image       String?
  Quiz        Question[]
}

model Achievement {
  id          Int    @id @default(autoincrement())
  name        String
  icon        String
  description String
  courseId    Int
  userId      String
  course      Course @relation(fields: [courseId], references: [id])
  user        User   @relation(fields: [userId], references: [id])
}

model CourseEnrollment {
  id                 String    @id @default(uuid())
  userId             String
  courseId           Int
  enrolledAt         DateTime  @default(now())
  completedAt        DateTime?
  course             Course    @relation(fields: [courseId], references: [id])
  name               String
  description        String
  image              String
  completed          Boolean   @default(false)
  progress           Int       @default(0)
  totalModules       Int
  User               User      @relation(fields: [userId], references: [id])
  completedModulesId Int[] // all the modules in that course
}

model Projects {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  description String
  createdDate DateTime @default(now())
  Githublink  String?
  isLink      Boolean  @default(true)
  content     String
  tags        String[]
}
